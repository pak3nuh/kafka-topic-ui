buildscript {
    
    ext {
        kotlin_version = "1.3.30"
        tornadofx_version = "1.7.17"
        junit_version = "5.1.0"
        log4j_version = "1.8.0-beta4"
        javafx_dispatcher_version = "1.2.1"
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.30'
}

apply plugin: "application"


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0"
    implementation "no.tornado:tornadofx:$tornadofx_version"
    implementation "org.springframework:spring-context:5.1.6.RELEASE"
    implementation "org.apache.kafka:kafka-clients:2.2.0"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.slf4j:slf4j-log4j12:$log4j_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$javafx_dispatcher_version"



    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

mainClassName = "com.example.demo.app.MyApp"

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
                "Main-Class": mainClassName
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

test {
    useJUnitPlatform()
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}